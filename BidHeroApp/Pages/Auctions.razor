@page "/auctions"
@using BidHeroApp.Components.Category
@using BidHeroApp.Constants;
@using BidHeroApp.Services.Contracts;
@using BidHeroApp.ViewModels;
@using BidHeroApp.InputModels;
@using BidHeroApp.Components.Item;
@using BidHeroApp.Components;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Mvc.Rendering;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ICategoryService CategoryService
@inject IAuctionService AuctionService
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="@Role.User" Context="innerContext">
    <Authorized>
        <PageTitle>Items</PageTitle>

        <h1>Items</h1>

        @if (_items == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-2">
                        <ListGroup Categories="_categories" SelectCategory="SelectCategory"></ListGroup>
                    </div>
                    <div class="col-md-8">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Item Name</th>
                                    <th>Points</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_items != null && _items.Any())
                                {
                                    @foreach (var item in _items)
                                    {
                                        <tr>
                                            <td>@item.Item.Text</td>
                                            <td>@item.Points</td>
                                            <td>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="3">No items</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <AuthorizeView>
            <Authorized>
                <Forbidden></Forbidden>
            </Authorized>
            <NotAuthorized>
                <RedirectToLogin />
            </NotAuthorized>
        </AuthorizeView>        
    </NotAuthorized>
</AuthorizeView>

@code {
    public bool IsLoading { get; set; } = false;
    private IList<SelectListItem>? _categories;
    private IList<AuctionItemViewModel>? _items;
    private int _categoryId = 0;
    private int _itemId = 0;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadListAsync();
        _categories = await CategoryService.AsSelectListAsync();
        IsLoading = false;
    }

    private async Task LoadListAsync()
    {
        _items = await AuctionService.ListAsync(null);

        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/auctionhub"))
        .Build();

        hubConnection.On<List<AuctionItemViewModel>>("RefreshAuctions", items =>
            {
                _items = items;
                InvokeAsync(StateHasChanged);
            });

        await hubConnection.StartAsync();
    }

    public async Task SelectCategory(string categoryId)
    {
        _categoryId = int.Parse(categoryId);
        _items = await AuctionService.ListAsync(_categoryId);
    }

}
