@using Blazored.FluentValidation;
@using BidHeroApp.InputModels;

<!-- Modal -->
<div class="modal fade" id="addCategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="addCategoryLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCategoryLabel">Add Category</h5>
                <button id="addCategoryClose" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>OnReset()"></button>
            </div>
            <EditForm Model="@Input" OnSubmit="@OnSave">
                <div class="modal-body">
                    <FluentValidationValidator @ref="_fluentValidationValidator" />
                    <ValidationSummary />

                    <input type="hidden" id="idInput" class="form-control" @bind="Input.Id">
                    <div class="mb-3">
                        <label for="nameInput" class="form-label">Name</label>
                        <InputText @bind-Value="@Input.Name" class="form-control" placeholder="Please enter name." />
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="@Input.IsActive" class="form-check-input" />
                            <label class="form-check-label" for="isActiveCheck">Is Active</label>
                        </div>
                    </div>
                </div>
                @if (IsParentComponentProcessing)
                {
                    <div class="modal-footer">
                        <button type="button" disabled class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" disabled class="btn btn-primary">Processing</button>
                    </div>
                }
                else
                {
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>OnReset()">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="()=>OnSave()">Save</button>
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code
{
    private FluentValidationValidator? _fluentValidationValidator;

    public CategoryInputModel Input { get; set; } = new();

    [Parameter]
    public bool IsParentComponentProcessing { get; set; }

    [Parameter]
    public EventCallback<CategoryInputModel> Callback { get; set; }

    private async Task OnSave()
    {
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            await Callback.InvokeAsync(Input);
        }
    }

    private void OnReset()
    {
        Input = new();
    }

}